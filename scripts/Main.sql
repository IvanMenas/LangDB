-- Database Creation
--------------------------------------------------------------------------------------------------------------------------------

-- Email Configuration on SQL+
----------------------------------------------------------
CONN SYS/PASSWORD AS SYSDBA
@$ORACLE_HOME/rdbms/admin/utlmail.sql
@$ORACLE_HOME/rdbms/admin/prvtmail.plb


ALTER SYSTEM SET smtp_out_server='localhost' SCOPE=SPFILE;

-- Table Creation
--------------------------------------------------------------------------------------------------------------------------------

-- USUARIOS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USUARIOS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE USUARIOS (
    ID_USER  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    USERNAME VARCHAR2(50),
    PASSWORD VARCHAR2(50),
    INTENTOS NUMBER
);

-- DIVISAS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE DIVISAS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE DIVISAS (
    ID_DIVISA         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOMBRE            VARCHAR2(30),
    PRECIO_VENTA_DOLAR  FLOAT, -- Necesitamos esto??
    PRECIO_COMPRA_DOLAR FLOAT, -- Necesitamos esto??
    RESERVA_DOLAR      FLOAT -- Necesitamos esto??
);

-- CUENTAS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CUENTAS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE CUENTAS (
    ID_CUENTA      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER        NUMBER, --Foreign Key
    ID_DIVISA      NUMBER, --Foreign Key
    IBAN           VARCHAR2(30),
    SALDO_TOTAL    FLOAT,
    SALDO_ACTUAL   FLOAT,
    SALDO_RETENIDO FLOAT,
    CREDITO        NUMBER(2),
    CONSTRAINT FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER),
    CONSTRAINT FK_ID_DIVISA
    FOREIGN KEY (ID_DIVISA)
    REFERENCES DIVISAS(ID_DIVISA)
);

-- TIPO_CEDULA Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE TIPO_CEDULA';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE TIPO_CEDULA ( --QUE VERGAS ES ESTO??
    ID_CEDULA NUMBER,
    DESCRIPCION    VARCHAR2(50),
    PAIS_ORIGEN    VARCHAR2(20)
);

-- USUARIOS_INFO Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USUARIOS_INFO';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE USUARIOS_INFO (
    ID_USUARIO_INFO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER         NUMBER, --Foreign Key
    ID_CEDULA  NUMBER, --Foreign Key
    NOMBRE          VARCHAR2(20),
    APELLIDO        VARCHAR2(20),
    CEDULA          VARCHAR2(20),
    TELEFONO        NUMBER, --Setearlo Unique
    CORREO          VARCHAR2(20), --Setearlo Unique
    DIRECCION       VARCHAR2(40),
    CONSTRAINT TELEFONO_UNIQUE UNIQUE (TELEFONO),
    CONSTRAINT CORREO_UNIQUE UNIQUE (CORREO),
    CONSTRAINT FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER),
    CONSTRAINT FK_ID_TIPO_CEDULA
    FOREIGN KEY (ID_CEDULA)
    REFERENCES TIPO_CEDULA(ID_CEDULA)
);

-- MOVIMIENTOS_DISPONIBLES Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE MOVIMIENTOS_DISPONIBLES';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE MOVIMIENTOS_DISPONIBLES (
    ID_MOVIMIENTOS NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_CUENTA      NUMBER, --Foreign Key
    SINPE_MOVIL    NUMBER(2),
    SINPE          NUMBER(2),
    DEPOSITO       NUMBER(2), --Que es?? Para Iban??
    CONSTRAINT FK_ID_CUENTA
    FOREIGN KEY (ID_CUENTA)
    REFERENCES CUENTAS(ID_CUENTA)
);

-- EMPRESAS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE EMPRESAS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE EMPRESAS ( --De que nos sirve esto?? Un servicio deberia de estar linkeado a una empresa
    ID_EMPRESA  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER     NUMBER, --Foreign Key
    NOMBRE      VARCHAR2(20),
    DESCRIPCION VARCHAR2(30),
    CONSTRAINT FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER)
);

-- ESTADOS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE ESTADOS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE ESTADOS (
    ID_STATUS   NUMBER, --Incremental?? O vamos a usar codigos especificos?
    DESCRIPCION VARCHAR2(30)
);

-- HISTORIAL_TRANSACCIONES Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE HISTORIAL_TRANSACCIONES';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE HISTORIAL_TRANSACCIONES (
    ID_TRANSACCION    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER           NUMBER, --Foreign Key 
    ID_CUENTA_ORIGEN  NUMBER, --Foreign Key ?
    ID_CUENTA_DESTINO NUMBER, --Foreign Key ?
    ID_STATUS         NUMBER, --Foreign Key
    MONTO             FLOAT,
    DESCRIPCION       VARCHAR2(30),
    CONSTRAINT FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER),
    CONSTRAINT FK_ID_CUENTA_ORIGEN --No se si tiene que ser FK
    FOREIGN KEY (ID_CUENTA_ORIGEN)
    REFERENCES CUENTAS(ID_CUENTA),
    CONSTRAINT FK_ID_CUENTA_DESTINO --No se si tiene que ser FK
    FOREIGN KEY (ID_CUENTA_DESTINO)
    REFERENCES CUENTAS(ID_CUENTA)
);

-- BALANCE Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE BALANCE';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE BALANCE ( -- QUE  ES ESTOOOOO???
    IDBALANCE   NUMBER,
    IDUSER      NUMBER,
    TOTALACTIVO FLOAT,
    TOTALPASIVO FLOAT
);

-- SERVICIOS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE SERVICIOS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE SERVICIOS ( -- Esto no es empresa??
    ID_SERVICIOS NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    DESCRIPCION VARCHAR2(30)
);

-- FACTURAS
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE FACTURAS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE FACTURAS (
    ID_FACTURA     NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_TRANSACCION NUMBER, --Foreign Key
    ID_SERVICIO    NUMBER, --Foreign Key
    ID_STATUS      NUMBER, --Foreign Key?? Como hago para actualizarlo si es una Foreign Key?? || Por pagar, pagada
    CONSTRAINT FK_ID_TRANSACCION
    FOREIGN KEY (ID_TRANSACCION)
    REFERENCES HISTORIAL_TRANSACCIONES(ID_TRANSACCION),
    CONSTRAINT FK_ID_SERVICIO
    FOREIGN KEY (ID_SERVICIO)
    REFERENCES SERVICIOS(ID_SERVICIO),
    CONSTRAINT FK_ID_STATUS --No se si tiene que ser FK || Creo que no tiene que ser FK
    FOREIGN KEY (ID_STATUS)
    REFERENCES ESTADOS(ID_STATUS)
);

-- Stored Procedures
--------------------------------------------------------------------------------------------------------------------------------
-- VALIDAR_SESION Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE LOGIN ( 
    P_USERNAME IN USUARIO.USERNAME%TYPE,
    P_PASSWORD IN USUARIO.PASSWORD%TYPE
) AS
BEGIN
  SELECT IDUSER FROM USUARIO WHERE USERNAME = 'admin' AND PASSWORD = 'admin';
END;



execute  LOGIN('admin', 'admin');



CREATE OR REPLACE PROCEDURE VALIDAR_SESION (
    P_USERNAME IN USUARIOS.USERNAME%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_ID_USER  OUT NUMBER, --Esto lo pueden guardar en una cockie
    P_USUARIO_INFO OUT SYS_REFCURSOR,
    P_REPLY    OUT VARCHAR2
) AS
    V_INTENTOS USUARIOS.INTENTOS%TYPE := 0;
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        ID_USER,
        INTENTOS
    INTO
        V_ID_USER,
        V_INTENTOS
    FROM
        USUARIOS
    WHERE
            USERNAME = P_USERNAME
        AND PASSWORD = P_PASSWORD;

    IF V_INTENTOS <= 7 THEN
        P_ID_USER := 0;
        P_REPLY := 'Usuario Bloqueado';
    END IF;

    IF V_ID_USER = 0 THEN
        P_ID_USER := 0;
        P_REPLY := 'Usuario o contrasenha incorrecto, trate de nuevo';
    ELSE
        P_ID_USER := V_ID_USER;
        P_REPLY := 'Bienvenido ' || P_USERNAME; --Podria hacer un SELECT para agarrar el nombre
        OPEN P_USUARIO_INFO FOR SELECT * FROM USUARIOS_INFO WHERE ID_USER = P_ID_USER;
    END IF;

END;

-- EDITAR_INFORMACION_USUARIO Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE EDITAR_INFORMACION_USUARIO (
    P_ID_USER  IN USUARIOS.ID_USER%TYPE,
    P_TELEFONO IN USUARIOS_INFO.TELEFONO%TYPE,
    P_CORREO   IN USUARIOS_INFO.CORREO%TYPE,
    P_REPLY    OUT VARCHAR2
) AS
    V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
BEGIN
    SELECT
        ID_USUARIO_INFO
    INTO V_ID_USUARIO_INFO
    FROM
        ID_USUARIO_INFO
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USUARIO_INFO = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        UPDATE USUARIOS_INFO
        SET
            TELEFONO = P_TELEFONO,
            CORREO = P_CORREO
        WHERE
            ID_USUARIO_INFO = V_ID_USUARIO_INFO;

        P_REPLY := 'Telefono y correo modificados correctamente';
    END IF;

END;

-- CAMBIAR_PASSWORD Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE CAMBIAR_PASSWORD (
    P_ID_USER  IN USUARIOS.ID_USER%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_REPLY    OUT VARCHAR2
) AS
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        ID_USER
    INTO
        V_ID_USER
    FROM
        USUARIOS
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        UPDATE USUARIOS
        SET
            PASSWORD = V_RANDOM_PASS
        WHERE
            ID_USER = V_ID_USER;

        P_REPLY := 'Contrasenha modificada correctamente';
    END IF;

END;

-- RECUPERAR_CUENTA Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE RECUPERAR_CUENTA (
    P_CORREO   IN USUARIOS_INFO.CORREO%TYPE,
    P_REPLY    OUT VARCHAR2
) AS
    V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
    V_ID_USER  USUARIOS_INFO.ID_USER%TYPE := 0;
    V_RANDOM_PASS  USUARIOS.PASSWORD%TYPE := 0;
BEGIN
    SELECT
        ID_USUARIO_INFO,
        ID_USER
    INTO 
        V_ID_USUARIO_INFO,
        V_ID_USER
    FROM
        ID_USUARIO_INFO
    WHERE
        CORREO = P_CORREO;

    IF V_ID_USUARIO_INFO = 0 THEN
        P_REPLY := 'No existe una cuenta con el correo ingresado';
    ELSE
        V_RANDOM_PASS := DBMS_RANDOM.string('x',10);
        
        UTL_MAIL.send(sender     => 'me@domain.com',
                      recipients => P_CORREO,
                      subject    => 'Recuperar Cuenta',
                      message    => 'Contrsenha temporal: ' || V_RANDOM_PASS);
                      
        UPDATE USUARIOS
        SET
            PASSWORD = V_RANDOM_PASS
        WHERE
            ID_USER = V_ID_USER;
        
        P_REPLY := 'Correo enviado!';
    END IF;
END;

-- AGREGAR_CUENTA_BANCARIA Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE AGREGAR_CUENTA_BANCARIA (
    P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_ID_DIVISA   IN CUENTAS.ID_DIVISA%TYPE,
    P_IBAN   IN CUENTAS.IBAN%TYPE,
    P_SALDO_TOTAL   IN CUENTAS.SALDO_TOTAL%TYPE,
    P_SALDO_ACTUAL   IN CUENTAS.SALDO_ACTUAL%TYPE,
    P_SALDO_RETENIDO   IN CUENTAS.SALDO_RETENIDO%TYPE,
    P_CREDITO   IN CUENTAS.CREDITO%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        ID_USER
    INTO
        V_ID_USER
    FROM
        USUARIOS
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        INSERT INTO CUENTAS
            (ID_USER, ID_DIVISA, IBAN, SALDO_TOTAL,  SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
        VALUES
            (P_ID_USER, P_ID_DIVISA, P_IBAN, P_SALDO_TOTAL,  P_SALDO_ACTUAL, P_SALDO_RETENIDO, P_CREDITO);
            
        P_REPLY := 'Tarjeta agregada correctamente';
    END IF;
END;

-- ELIMINAR_CUENTA_BANCARIA Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE ELIMINAR_CUENTA_BANCARIA (
    P_ID_CUENTA IN CUENTAS.ID_CUENTA%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_CUENTA  CUENTAS.ID_CUENTA%TYPE := 0;
BEGIN
    SELECT
        ID_CUENTA
    INTO
        V_ID_CUENTA
    FROM
        CUENTAS
    WHERE
        ID_CUENTA = P_ID_CUENTA;

    IF V_ID_CUENTA = 0 THEN
        P_REPLY := 'Cuenta bancaria no existe';
    ELSE
        DELETE
        FROM
            CUENTAS
        WHERE
            ID_CUENTA = V_ID_CUENTA;
            
        P_REPLY := 'Cuenta bancaria eliminada correctamente';
    END IF;
END;

-- CARGAR_CUENTAS_BANCARIAS Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE CARGAR_CUENTAS_BANCARIAS (
    P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_CUENTAS OUT SYS_REFCURSOR,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER
CUENTAS.ID_USER%TYPE := 0;

BEGIN
    SELECT
        ID_USER
    INTO V_ID_USER
    FROM
        CUENTAS
    WHERE
        ID_CUENTA = P_ID_CUENTA;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        OPEN P_CUENTAS FOR SELECT
                               *
                           FROM
                               CUENTAS
                           WHERE
                               ID_USER = P_ID_USER;

    END IF;

END;

-- CARGAR_SERVICIOS Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE CARGAR_SERVICIOS (
    P_SERVICIOS OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_CUENTAS FOR SELECT
                           *
                       FROM
                           SERVICIOS;

END;

-- CARGAR_CUENTAS_BANCARIAS Stored Procedure
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE VERIFICAR_FACTURA (
    P_ID_USER IN FACTURAS.ID_USER%TYPE,
    P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
    P_FACTURA OUT SYS_REFCURSOR, --No se que es lo que ocupa, si Factura, Transacccion? O las dos?
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
BEGIN
    SELECT --Hacer una funcion 
        ID_USER
    INTO V_ID_USER
    FROM
        USUARIOS
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
    --TODO: Buscar facturas que tengan el status "pendiente" y que tengan el mismo ID_USER que el parametro
        OPEN P_FACTURA FOR SELECT
                               *
                           FROM
                                    FACTURAS F
                               INNER JOIN HISTORIAL_TRANSACCIONES HT --No se si ocupamos otra tabla solo de transacciones
                                ON F.ID_TRANSACCION = HT.ID_TRANSACCION
                           WHERE
                                   F.ID_SERVICIO = P_ID_SERVICIO
                               AND HT.ID_USER = P_ID_USER
                               AND ID_STATUS = 5; --TODO: Setear un status de "Por Pagar"

    END IF;

END;

-- PAGAR_FACTURA Stored Procedure 
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE PAGAR_FACTURA (
    P_ID_FACTURA IN FACTURAS.ID_FACTURA%TYPE,
    P_ID_USER IN FACTURAS.ID_USER%TYPE,
    P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
    P_MONTO IN FACTURAS.ID_SERVICIO%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
BEGIN
    SELECT --Hacer una funcion 
        ID_USER
    INTO V_ID_USER
    FROM
        USUARIOS
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
    --Cambiar status de factura por 'pagado'
UPDATE FACTURAS
                SET
            ID_STATUS = 5 --TODO: Setear un Status de pago || No se si por ser FK va a tirar error
        WHERE
            ID_FACTURA = ID_FACTURA;
    --Revisar que la persona a pagar tenga la plata
        --Devolver con P_REPLY en caso de que no
        --Rebajar monto de la persona que pago
        --Agregar registor de transaccion
    
    --Agregar monto a la persona que le pagaron
        --Agregar registor de transaccion
        --TODO: Ocupo conectar servicios con empresa, o con un usuario para poder pagarle
    END IF;

END;

-- CARGAR_HISTORIAL_TRANSACCIONES Stored Procedure 
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE CARGAR_HISTORIAL_TRANSACCIONES (
    P_ID_USER       IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
    P_ID_CUENTA     IN HISTORIAL_TRANSACCIONES.ID_CUENTA%TYPE,
    P_TRANSACCIONES OUT SYS_REFCURSOR,
    P_REPLY         OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
BEGIN
    SELECT --Hacer una funcion 
        ID_USER
    INTO V_ID_USER
    FROM
        USUARIOS
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        OPEN P_TRANSACCIONES FOR SELECT
                                     *
                                 FROM
                                     HISTORIAL_TRANSACCIONES
                                 WHERE
                                         ID_USER = P_ID_USER --Aca terngo que haver un JOIN miedo porque no me va a servir destino
                                     AND ( ID_CUENTA_ORIGEN = P_ID_CUENTA
                                           OR ID_CUENTA_DESTINO = P_ID_CUENTA );
    END IF;
END;

-- TRANSFERENCIA Stored Procedure 
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE TRANSFERENCIA ( --Hay que buscarle un mejor nombre
    P_ID_USER IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
    P_ID_CUENTA_ORIGEN IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
    P_ID_CUENTA_DESTINO HISTORIAL_TRANSACCIONES.ID_CUENTA_DESTINO%TYPE,
    P_MONTO IN HISTORIAL_TRANSACCIONES.ID_SERVICIO%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
    V_MONTO CUENTAS.MONTO%TYPE := 0;
BEGIN
    SELECT --Hacer una funcion 
        ID_USER
    INTO V_ID_USER
    FROM
        USUARIOS
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
    --Revisar que la persona a pagar tenga la plata
        --Devolver con P_REPLY en caso de que no
        --Rebajar monto de la persona que pago
        --Agregar registro de transaccion
    
    --Agregar monto a la persona que le pagaron
        --Agregar registor de transaccion
    
    END IF;

END;

-- SINPE Stored Procedure 
----------------------------------------------------------
CREATE OR REPLACE PROCEDURE SINPE ( --Hay que buscarle un mejor nombre
    P_ID_USER IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
    P_ID_CUENTA_ORIGEN IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
    P_ID_CUENTA_DESTINO HISTORIAL_TRANSACCIONES.ID_CUENTA_DESTINO%TYPE,
    P_MONTO IN HISTORIAL_TRANSACCIONES.ID_SERVICIO%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
    V_MONTO CUENTAS.MONTO%TYPE := 0;
BEGIN
    SELECT --Hacer una funcion 
        ID_USER
    INTO V_ID_USER
    FROM
        USUARIOS
    WHERE
        ID_USER = P_ID_USER;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
    --Revisar que la persona a pagar tenga la plata
        --Devolver con P_REPLY en caso de que no
        --Rebajar monto de la persona que pago
        --Agregar registro de transaccion
    
    --Agregar monto a la persona que le pagaron
        --Agregar registor de transaccion
    
    END IF;

END;