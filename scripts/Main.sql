-- Database Creation
--------------------------------------------------------------------------------------------------------------------------------
ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;

CREATE TABLESPACE PROYECTOBD DATAFILE 'C:\SQLProjects\proyecto01.dbf' SIZE 50M;

-- Table Elimination | Creation | Insertion
--------------------------------------------------------------------------------------------------------------------------------
-- USUARIOS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USUARIOS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE USUARIOS (
    ID_USER  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    USERNAME VARCHAR2(50),
    PASSWORD VARCHAR2(50),
    INTENTOS NUMBER,
    CONSTRAINT ID_USER_PK PRIMARY KEY (ID_USER)
);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('admin', 'admin', 1);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('Ivan', 'Ivan', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('Allan', 'Allan', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('CCSS', 'admin', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('AYA', 'admin', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('ICE', 'admin', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('CNFL', 'admin', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('TIGO', 'admin', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('KOLBI', 'admin', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('INS', 'admin', 0);

INSERT INTO USUARIOS(USERNAME, PASSWORD, INTENTOS)
VALUES
('COSEVI', 'admin', 0);

-- DIVISAS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE DIVISAS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE DIVISAS (
    ID_DIVISA     NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NOMBRE        VARCHAR2(30),
    PRECIO_VENTA  FLOAT,
    PRECIO_COMPRA FLOAT,
    CONSTRAINT ID_DIVISA_PK PRIMARY KEY (ID_DIVISA)
);

INSERT INTO DIVISAS(NOMBRE, PRECIO_VENTA, PRECIO_COMPRA)
VALUES
('Colones', 0.0016, 0.0018);

INSERT INTO DIVISAS(NOMBRE, PRECIO_VENTA, PRECIO_COMPRA)
VALUES
('Dolar', 1, 1.2);

INSERT INTO DIVISAS(NOMBRE, PRECIO_VENTA, PRECIO_COMPRA)
VALUES
('Euro', 1.13, 1.25);

-- MOVIMIENTOS_DISPONIBLES Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE MOVIMIENTOS_DISPONIBLES CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE MOVIMIENTOS_DISPONIBLES (
    ID_MOVIMIENTO  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    SINPE_MOVIL    NUMBER(2),
    SINPE          NUMBER(2),
    CONSTRAINT ID_MOVIMIENTO_PK PRIMARY KEY (ID_MOVIMIENTO)
);

INSERT INTO MOVIMIENTOS_DISPONIBLES(SINPE_MOVIL, SINPE)
VALUES
(1, 1);

INSERT INTO MOVIMIENTOS_DISPONIBLES(SINPE_MOVIL, SINPE)
VALUES
(1, 0);

INSERT INTO MOVIMIENTOS_DISPONIBLES(SINPE_MOVIL, SINPE)
VALUES
(0, 1);

INSERT INTO MOVIMIENTOS_DISPONIBLES(SINPE_MOVIL, SINPE)
VALUES
(0, 0);

-- CUENTAS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE CUENTAS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE CUENTAS (
    ID_CUENTA      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER        NUMBER,
    ID_DIVISA      NUMBER,
    ID_MOVIMIENTO  NUMBER,
    IBAN           VARCHAR2(30),
    SALDO_TOTAL    FLOAT,
    SALDO_ACTUAL   FLOAT,
    SALDO_RETENIDO FLOAT,
    CREDITO        NUMBER(2),
    CONSTRAINT ID_CUENTA_PK PRIMARY KEY (ID_CUENTA),
    CONSTRAINT CUENTAS_FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER),
    CONSTRAINT CUENTAS_FK_ID_DIVISA
    FOREIGN KEY (ID_DIVISA)
    REFERENCES DIVISAS(ID_DIVISA),
    CONSTRAINT CUENTAS_FK_ID_MOVIMIENTO
    FOREIGN KEY (ID_MOVIMIENTO)
    REFERENCES MOVIMIENTOS_DISPONIBLES(ID_MOVIMIENTO)
);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(41, 1, 1, 'CR123456891010', 150000, 85000, 65000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO,  IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(41, 2, 2, 'CR123889992019', 800000, 5000, 75000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO,  IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(22, 3, 3, 'CR123453445010', 10000000, 0, 65000, 1);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(4, 1, 1, 'CR5678123484910', 200000, 105000, 80000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(5, 1, 1, 'CR632327331010', 1500000, 850000, 650000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(6, 1, 1, 'CR143455591010', 7700000, 547000, 100000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(7, 1, 1, 'CR777777777700', 8910000, 232000, 281000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(8, 1, 1, 'CR6343724324320', 1500000, 125000, 165000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(9, 1, 1, 'CR124454545455', 15220000, 850000, 650000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(10, 1, 1, 'CR37283782333', 112000, 87000, 66000, 0);

INSERT INTO CUENTAS(ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
VALUES
(11, 1, 1, 'CR123456891010', 150000, 85000, 65000, 0);

-- TIPOS_CEDULAS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE TIPOS_CEDULAS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE TIPOS_CEDULAS (
    ID_CEDULA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    DESCRIPCION    VARCHAR2(50),
    CONSTRAINT ID_CEDULA_PK PRIMARY KEY (ID_CEDULA)
);

INSERT INTO TIPOS_CEDULAS(DESCRIPCION)
VALUES
('Residencia');

INSERT INTO TIPOS_CEDULAS(DESCRIPCION)
VALUES
('Extranjero');

INSERT INTO TIPOS_CEDULAS(DESCRIPCION)
VALUES
('Licencia de conducir');

-- USUARIOS_INFO Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE USUARIOS_INFO CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE USUARIOS_INFO (
    ID_USUARIO_INFO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER         NUMBER,
    ID_CEDULA       NUMBER, --Creo que no es necesario, complica las cosas
    NOMBRE          VARCHAR2(100),
    APELLIDO        VARCHAR2(100),
    CEDULA          VARCHAR2(100),
    TELEFONO        NUMBER,
    CORREO          VARCHAR2(100),
    DIRECCION       VARCHAR2(100),
    CONSTRAINT ID_USUARIO_INFO_PK PRIMARY KEY (ID_USUARIO_INFO),
    CONSTRAINT TELEFONO_UNIQUE UNIQUE (TELEFONO),
    CONSTRAINT CORREO_UNIQUE UNIQUE (CORREO),
    CONSTRAINT USUARIOS_INFO_FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER),
    CONSTRAINT USUARIOS_INFO_FK_ID_TIPO_CEDULA
    FOREIGN KEY (ID_CEDULA)
    REFERENCES TIPOS_CEDULAS(ID_CEDULA)
);

INSERT INTO USUARIOS_INFO(ID_USER, ID_CEDULA, NOMBRE, APELLIDO, CEDULA, TELEFONO, CORREO, DIRECCION)
VALUES
(21, 1, 'Joseph', 'Mesen', '118180569', '87281936', 'joemesoto@gmail.com', 'Hatillo');

INSERT INTO USUARIOS_INFO(ID_USER, ID_CEDULA, NOMBRE, APELLIDO, CEDULA, TELEFONO, CORREO, DIRECCION)
VALUES
(22, 2, 'Ivan', 'Menas', '118180568', '87281935', 'joemesoto@hotmail.com', 'Pavas');

INSERT INTO USUARIOS_INFO(ID_USER, ID_CEDULA, NOMBRE, APELLIDO, CEDULA, TELEFONO, CORREO, DIRECCION)
VALUES
(23, 3, 'Allan', 'Fernandez', '118180567', '87281934', 'joemesoto@outlook.com', 'Escazu');

-- EMPRESAS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE EMPRESAS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE EMPRESAS (
    ID_EMPRESA  NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER     NUMBER,
    NOMBRE      VARCHAR2(20),
    DESCRIPCION VARCHAR2(30),
    CONSTRAINT ID_EMPRESA_PK PRIMARY KEY (ID_EMPRESA),
    CONSTRAINT EMPRESAS_FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER)
);

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(24, 'CCSS', 'Servicio de salud');

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(25, 'AYA', 'Servicio de agua');

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(26, 'ICE', 'Servicio de electricidad');

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(27, 'CNFL', 'Servicio de electricidad');

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(28, 'TIGO', 'Servicio de telecomunicaciones');

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(29, 'KOLBI', 'Servicio de telecomunicaciones');

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(30, 'INS', 'Servicio de seguros');

INSERT INTO EMPRESAS(ID_USER, NOMBRE, DESCRIPCION)
VALUES
(31, 'COSEVI', 'Servicio de transporte');

-- ESTADOS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE ESTADOS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE ESTADOS (
    ID_STATUS   NUMBER, --Incremental?? O vamos a usar codigos especificos?
    DESCRIPCION VARCHAR2(30),
    CONSTRAINT ID_STATUS_PK PRIMARY KEY (ID_STATUS)
);

INSERT INTO ESTADOS(ID_STATUS, DESCRIPCION)
VALUES
(200, 'Exitoso');

INSERT INTO ESTADOS(ID_STATUS, DESCRIPCION)
VALUES
(300, 'Pendiente');

INSERT INTO ESTADOS(ID_STATUS, DESCRIPCION)
VALUES
(500, 'Error');

-- HISTORIAL_TRANSACCIONES Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE HISTORIAL_TRANSACCIONES CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE HISTORIAL_TRANSACCIONES (
    ID_TRANSACCION    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_USER           NUMBER,
    ID_CUENTA_ORIGEN  NUMBER,
    ID_CUENTA_DESTINO NUMBER,
    ID_STATUS         NUMBER,
    MONTO             FLOAT,
    DESCRIPCION       VARCHAR2(30),
    CONSTRAINT ID_TRANSACCION_PK PRIMARY KEY (ID_TRANSACCION),
    CONSTRAINT HISTORIAL_TRANSACCIONES_FK_ID_USER
    FOREIGN KEY (ID_USER)
    REFERENCES USUARIOS(ID_USER),
    CONSTRAINT HISTORIAL_TRANSACCIONES_FK_ID_CUENTA_ORIGEN
    FOREIGN KEY (ID_CUENTA_ORIGEN)
    REFERENCES CUENTAS(ID_CUENTA),
    CONSTRAINT HISTORIAL_TRANSACCIONES_FK_ID_CUENTA_DESTINO
    FOREIGN KEY (ID_CUENTA_DESTINO)
    REFERENCES CUENTAS(ID_CUENTA)
);

INSERT INTO HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
VALUES
(21, 11, 12, 300, 1000, 'Test 1');

INSERT INTO HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
VALUES
(21, 12, 12, 200, 2000, 'Test 2');

INSERT INTO HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
VALUES
(31, 13, 11, 300, 1000, 'Test 3');

-- SERVICIOS Table
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE SERVICIOS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE SERVICIOS (
    ID_SERVICIO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_EMPRESA      NUMBER,
    DESCRIPCION VARCHAR2(30),
    CONSTRAINT ID_SERVICIO_PK PRIMARY KEY (ID_SERVICIO),
    CONSTRAINT SERVICIOS_FK_ID_EMPRESA
    FOREIGN KEY (ID_EMPRESA)
    REFERENCES EMPRESAS(ID_EMPRESA)
);

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(9, 'Servicio de salud');

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(10, 'Servicio de agua');

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(11, 'Servicio de electricidad');

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(12, 'Servicio de electricidad');

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(13, 'Servicio de telecomunicaciones');

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(14, 'Servicio de telecomunicaciones');

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(15, 'Servicio de seguros');

INSERT INTO SERVICIOS(ID_EMPRESA, DESCRIPCION)
VALUES
(16, 'Servicio de transporte');

-- FACTURAS
----------------------------------------------------------
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE FACTURAS CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;

CREATE TABLE FACTURAS (
    ID_FACTURA     NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    ID_TRANSACCION NUMBER,
    ID_SERVICIO    NUMBER,
    ID_STATUS      NUMBER,
    CONSTRAINT ID_FACTURA_PK PRIMARY KEY (ID_FACTURA),
    CONSTRAINT FACTURAS_FK_ID_TRANSACCION
    FOREIGN KEY (ID_TRANSACCION)
    REFERENCES HISTORIAL_TRANSACCIONES(ID_TRANSACCION),
    CONSTRAINT FACTURAS_FK_ID_SERVICIO
    FOREIGN KEY (ID_SERVICIO)
    REFERENCES SERVICIOS(ID_SERVICIO)
);

INSERT INTO FACTURAS(ID_TRANSACCION, ID_SERVICIO, ID_STATUS)
VALUES
(5, 9, 300);

INSERT INTO FACTURAS(ID_TRANSACCION, ID_SERVICIO, ID_STATUS)
VALUES
(6, 10, 200);

INSERT INTO FACTURAS(ID_TRANSACCION, ID_SERVICIO, ID_STATUS)
VALUES
(7, 11, 200);

-- Functions
--------------------------------------------------------------------------------------------------------------------------------
-- GET_ID_USER Function
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP FUNCTION GET_ID_USER';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE FUNCTION GET_ID_USER (
    P_DATA IN VARCHAR2,
    P_DATA2 IN VARCHAR2,
    P_BY IN VARCHAR2
) RETURN NUMBER IS
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
BEGIN
    CASE P_BY
        WHEN 'ID_USER' THEN
            SELECT
                ID_USER
            INTO
                V_ID_USER
            FROM
                USUARIOS
            WHERE
                ID_USER = TO_NUMBER(P_DATA);
                
            RETURN (V_ID_USER);
        WHEN 'USERNAME' THEN
            SELECT
                ID_USER
            INTO
                V_ID_USER
            FROM
                USUARIOS
            WHERE
                USERNAME = P_DATA;
                
            RETURN (V_ID_USER);
        WHEN 'PASSWORD' THEN
            SELECT
                ID_USER
            INTO
                V_ID_USER
            FROM
                USUARIOS
            WHERE
                    USERNAME = P_DATA
                AND PASSWORD = P_DATA2;
                
            RETURN (V_ID_USER);
    END CASE;
    
    EXCEPTION WHEN NO_DATA_FOUND THEN
        RETURN (V_ID_USER);
END;

SELECT
    GET_ID_USER(P_DATA => '34', P_DATA2 => '', P_BY => 'ID_USER')
FROM
    DUAL;
    
SELECT
    GET_ID_USER(P_DATA => 'Chrisca', P_DATA2 => '', P_BY => 'USERNAME')
FROM
    DUAL;
    
SELECT
    GET_ID_USER(P_DATA => 'Joseph', P_DATA2 => 'JOSEPH', P_BY => 'PASSWORD')
FROM
    DUAL;

-- GET_ID_USER Function
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP FUNCTION GET_ID_USUARIO_INFO';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE FUNCTION GET_ID_USUARIO_INFO (
    P_DATA IN VARCHAR2,
    P_BY IN VARCHAR2
) RETURN NUMBER IS
    V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
BEGIN
    CASE P_BY
        WHEN 'ID_USER' THEN
            SELECT
                ID_USUARIO_INFO
            INTO V_ID_USUARIO_INFO
            FROM
                USUARIOS_INFO
            WHERE
                ID_USER = TO_NUMBER(P_DATA);
                
            RETURN (V_ID_USUARIO_INFO);
    END CASE;
    
    EXCEPTION WHEN NO_DATA_FOUND THEN
        RETURN (V_ID_USUARIO_INFO);
END;

SELECT
    GET_ID_USUARIO_INFO(P_DATA => '1', P_BY => 'ID_USER')
FROM
    DUAL;

-- GET_ID_USER Function
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP FUNCTION GET_ID_CUENTA';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE FUNCTION GET_ID_CUENTA (
    P_DATA IN VARCHAR2,
    P_BY IN VARCHAR2
) RETURN NUMBER IS
    V_ID_CUENTA CUENTAS.ID_CUENTA%TYPE := 0;
BEGIN
    CASE P_BY
        WHEN 'IBAN' THEN
            SELECT
                ID_CUENTA
            INTO
                V_ID_CUENTA
            FROM
                CUENTAS
            WHERE
                IBAN = P_DATA;
                
            RETURN (V_ID_CUENTA);
    END CASE;
    
    EXCEPTION WHEN NO_DATA_FOUND THEN
        RETURN (V_ID_CUENTA);
END;

SELECT
    GET_ID_CUENTA(P_DATA => 'CRTEST', P_BY => 'IBAN')
FROM
    DUAL;

-- SQL Dynamic
--------------------------------------------------------------------------------------------------------------------------------
-- DYNAMIC_UPDATE SQL Dynamic
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE DYNAMIC_UPDATE';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE DYNAMIC_UPDATE (
    P_TABLE IN VARCHAR2,
    P_COLUMN IN VARCHAR2,
    P_VALUE IN VARCHAR2,
    P_WHERE IN VARCHAR2
) AS
    UPDATE_SQL VARCHAR2(300);
BEGIN
    UPDATE_SQL := 'UPDATE ' || P_TABLE ||
        ' SET ' || P_COLUMN ||' = ' || '''' ||  P_VALUE || '''' ||
        ' WHERE ' || P_WHERE;
    
    EXECUTE IMMEDIATE UPDATE_SQL;
END;

DECLARE
    -- PARAMETERS
    P_TABLE VARCHAR2(200) := 'USUARIOS';
    P_COLUM VARCHAR2(200) := 'PASSWORD';
    P_VALUE VARCHAR2(200) := 'JOSEPH4';
    P_WHERE VARCHAR2(200) := 'ID_USER = ' || TO_CHAR(1);
BEGIN
    DYNAMIC_UPDATE(P_TABLE, P_COLUM, P_VALUE, P_WHERE);
END;

SELECT * FROM USUARIOS WHERE ID_USER = 1;

-- DYNAMIC_DELETE SQL Dynamic
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE DYNAMIC_DELETE';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE DYNAMIC_DELETE(
    P_TABLE IN VARCHAR2,
    P_WHERE IN VARCHAR2
) AS
    DELETE_SQL VARCHAR2(300);
BEGIN
    DELETE_SQL := 'DELETE FROM ' || P_TABLE || ' WHERE ' || P_WHERE;
    
    EXECUTE IMMEDIATE DELETE_SQL;
END;

DECLARE
    -- PARAMETERS
    P_TABLE VARCHAR2(200) := 'CUENTAS';
    P_IBAN CUENTAS.IBAN%TYPE := 'CRTEST';
    P_WHERE VARCHAR2(200) := 'IBAN = ' || '''' ||  P_IBAN || '''';
BEGIN
    DYNAMIC_DELETE(P_TABLE, P_WHERE);
END;

SELECT * FROM CUENTAS WHERE IBAN = 'CRTEST';

-- Stored Procedures
--------------------------------------------------------------------------------------------------------------------------------
-- AGREGAR_USUARIO Stored Procedure
----------------------------------------------------------
SET SERVEROUTPUT ON;

BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE AGREGAR_USUARIO';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE AGREGAR_USUARIO (
    P_USERNAME IN USUARIOS.USERNAME%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_NOMBRE IN USUARIOS_INFO.NOMBRE%TYPE,
    P_APELLIDO IN USUARIOS_INFO.APELLIDO%TYPE,
    P_CEDULA IN USUARIOS_INFO.CEDULA%TYPE,
    P_TELEFONO IN USUARIOS_INFO.TELEFONO%TYPE,
    P_CORREO IN USUARIOS_INFO.CORREO%TYPE,
    P_DIRECCION IN USUARIOS_INFO.DIRECCION%TYPE,
    P_REPLY    OUT VARCHAR2
) AS
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        GET_ID_USER(P_DATA => P_USERNAME, P_DATA2 => '', P_BY => 'USERNAME')
    INTO
        V_ID_USER
    FROM
        DUAL;
        
    IF V_ID_USER != 0 THEN
        P_REPLY := 'Usuario ya existe';
    END IF;
    
    IF V_ID_USER = 0 THEN
        INSERT INTO USUARIOS
            (USERNAME, PASSWORD, INTENTOS)
        VALUES
            (P_USERNAME, P_PASSWORD, 0);
            
        SELECT
            GET_ID_USER(P_DATA => P_USERNAME, P_DATA2 => P_PASSWORD, P_BY => 'PASSWORD')
        INTO
            V_ID_USER
        FROM
            DUAL;
            
        INSERT INTO USUARIOS_INFO
            (ID_USER, ID_CEDULA, NOMBRE, APELLIDO, CEDULA, TELEFONO, CORREO, DIRECCION)
        VALUES
            (V_ID_USER, 1, P_NOMBRE, P_APELLIDO, P_CEDULA,  P_TELEFONO, P_CORREO, P_DIRECCION);
        
        P_REPLY := 'Usuario creado correctamente';
    END IF;
END;

DECLARE
    -- PARAMETERS
    P_USERNAME USUARIOS.USERNAME%TYPE := 'Chrisca';
    P_PASSWORD USUARIOS.PASSWORD%TYPE := 'Chrisca';
    P_NOMBRE USUARIOS_INFO.NOMBRE%TYPE := 'Chris';
    P_APELLIDO USUARIOS_INFO.APELLIDO%TYPE := 'Canales';
    P_CEDULA USUARIOS_INFO.CEDULA%TYPE := '118180566';
    P_TELEFONO USUARIOS_INFO.TELEFONO%TYPE := '87281933';
    P_CORREO USUARIOS_INFO.CORREO%TYPE := 'cchris@test.com';
    P_DIRECCION USUARIOS_INFO.DIRECCION%TYPE := 'San Sebastian';
    P_REPLY VARCHAR2(100);
BEGIN
    AGREGAR_USUARIO(P_USERNAME, P_PASSWORD, P_NOMBRE, P_APELLIDO, P_CEDULA, P_TELEFONO, P_CORREO, P_DIRECCION, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_REPLY);
END;

SELECT * FROM USUARIOS;

-- VALIDAR_SESION Stored Procedure
----------------------------------------------------------
SET SERVEROUTPUT ON;

BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE VALIDAR_SESION';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE VALIDAR_SESION (
    P_USERNAME IN USUARIOS.USERNAME%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_ID_USER  OUT USUARIOS.ID_USER%TYPE,
    P_USUARIO_INFO OUT SYS_REFCURSOR,
    P_REPLY    OUT VARCHAR2
) AS
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        GET_ID_USER(P_DATA => P_USERNAME, P_DATA2 => P_PASSWORD, P_BY => 'PASSWORD')
    INTO
        V_ID_USER
    FROM
        DUAL;

    IF V_ID_USER = 0 THEN
        P_ID_USER := 0;
        P_REPLY := 'Usuario o contrasenha incorrecto, trate de nuevo';
    ELSE
        P_ID_USER := V_ID_USER;
        P_REPLY := 'Bienvenido ' || P_USERNAME; --Podria hacer un SELECT para agarrar el nombre
        OPEN P_USUARIO_INFO FOR SELECT * FROM USUARIOS_INFO WHERE ID_USER = V_ID_USER;
    END IF;
END;

DECLARE
    -- PARAMETERS
    P_USERNAME USUARIOS.USERNAME%TYPE := 'Chrisca';
    P_PASSWORD USUARIOS.PASSWORD%TYPE := 'Chrisca';
    P_ID_USER USUARIOS.ID_USER%TYPE;
    P_USUARIO_INFO SYS_REFCURSOR;
    P_REPLY VARCHAR2(200);
    -- CURSOR
    ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE;
    ID_USER USUARIOS_INFO.ID_USER%TYPE;
    ID_CEDULA USUARIOS_INFO.ID_CEDULA%TYPE;
    NOMBRE USUARIOS_INFO.NOMBRE%TYPE;
    APELLIDO USUARIOS_INFO.APELLIDO%TYPE;
    CEDULA USUARIOS_INFO.CEDULA%TYPE;
    TELEFONO USUARIOS_INFO.TELEFONO%TYPE;
    CORREO USUARIOS_INFO.CORREO%TYPE;
    DIRECCION USUARIOS_INFO.DIRECCION%TYPE;
BEGIN
    VALIDAR_SESION(P_USERNAME, P_PASSWORD, P_ID_USER, P_USUARIO_INFO, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_ID_USER);
    DBMS_OUTPUT.PUT_LINE(P_REPLY);
    
    LOOP
        FETCH P_USUARIO_INFO 
        INTO ID_USUARIO_INFO, ID_USER, ID_CEDULA, NOMBRE, APELLIDO, CEDULA, TELEFONO, CORREO, DIRECCION;
        EXIT WHEN P_USUARIO_INFO%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ID_USUARIO_INFO || ID_USER || ID_CEDULA || NOMBRE || APELLIDO || CEDULA || TELEFONO  || CORREO || DIRECCION);
    END LOOP;
    
    CLOSE P_USUARIO_INFO;
END;

-- EDITAR_INFORMACION_USUARIO Stored Procedure
----------------------------------------------------------
SET SERVEROUTPUT ON;

BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE EDITAR_INFORMACION_USUARIO';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE EDITAR_INFORMACION_USUARIO (
    P_ID_USER   IN USUARIOS.ID_USER%TYPE,
    P_TELEFONO  IN USUARIOS_INFO.TELEFONO%TYPE,
    P_CORREO    IN USUARIOS_INFO.CORREO%TYPE,
    P_DIRECCION IN USUARIOS_INFO.DIRECCION%TYPE,
    P_REPLY     OUT VARCHAR2
) AS
    V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
BEGIN
    SELECT
        GET_ID_USUARIO_INFO(P_DATA => TO_CHAR(P_ID_USER), P_BY => 'ID_USER')
    INTO 
        V_ID_USUARIO_INFO
    FROM
        DUAL;

    IF V_ID_USUARIO_INFO = 0 THEN
        P_REPLY := 'NE';
    END IF;
    
    IF P_TELEFONO IS NOT NULL THEN
    
        DYNAMIC_UPDATE('USUARIOS_INFO', 'TELEFONO', TO_CHAR(P_TELEFONO), 'ID_USUARIO_INFO = ' || TO_CHAR(V_ID_USUARIO_INFO));
    
        P_REPLY := 'SE/CO';
    END IF;
    
    IF P_CORREO IS NOT NULL THEN
    
        DYNAMIC_UPDATE('USUARIOS_INFO', 'CORREO', P_CORREO, 'ID_USUARIO_INFO = ' || TO_CHAR(V_ID_USUARIO_INFO));
        
        P_REPLY := 'SE/TE';
    END IF;
    
    IF P_DIRECCION IS NOT NULL THEN
    
        DYNAMIC_UPDATE('USUARIOS_INFO', 'DIRECCION', P_DIRECCION, 'ID_USUARIO_INFO = ' || TO_CHAR(V_ID_USUARIO_INFO));

        P_REPLY := 'SE';
    END IF;

END;

DECLARE
    -- PARAMETERS
    P_ID_USER  USUARIOS_INFO.ID_USER%TYPE := 1;
    P_TELEFONO USUARIOS_INFO.TELEFONO%TYPE := '88159923';
    P_CORREO   USUARIOS_INFO.CORREO%TYPE := '';
    P_DIRECCION   USUARIOS_INFO.DIRECCION %TYPE := '';
    P_REPLY    VARCHAR2(200);
BEGIN
    EDITAR_INFORMACION_USUARIO(P_ID_USER, P_TELEFONO, P_CORREO, P_DIRECCION, P_REPLY);
    DBMS_OUTPUT.PUT_LINE(P_REPLY);
END;

SELECT * FROM USUARIOS_INFO WHERE ID_USER = 1;

-- CAMBIAR_PASSWORD Stored Procedure
----------------------------------------------------------
SET SERVEROUTPUT ON;

BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE CAMBIAR_PASSWORD';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE CAMBIAR_PASSWORD (
    P_ID_USER  IN USUARIOS.ID_USER%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_REPLY    OUT VARCHAR2
) AS
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
    V_RANDOM_PASS VARCHAR2(200);
BEGIN
    SELECT
        GET_ID_USER(P_DATA => TO_CHAR(P_ID_USER), P_DATA2 => '', P_BY => 'ID_USER')
    INTO
        V_ID_USER
    FROM
        DUAL;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        DYNAMIC_UPDATE('USUARIOS', 'PASSWORD', P_PASSWORD, 'ID_USER = ' || TO_CHAR(V_ID_USER));
        
        P_REPLY := 'Contrasenha modificada correctamente';
    END IF;

END;

DECLARE
    -- PARAMETERS
    P_ID_USER USUARIOS.ID_USER%TYPE := 1;
    P_PASSWORD USUARIOS.PASSWORD%TYPE := 'JOSEPH5';
    P_REPLY VARCHAR2(200);
BEGIN
    CAMBIAR_PASSWORD(P_ID_USER, P_PASSWORD, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_REPLY);
END;

SELECT * FROM USUARIOS WHERE ID_USER = 1;

-- RECUPERAR_CUENTA Stored Procedure
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE RECUPERAR_CUENTA';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE RECUPERAR_CUENTA (
    P_CORREO   IN USUARIOS_INFO.CORREO%TYPE,
    P_CLAVE    OUT USUARIOS.PASSWORD%TYPE,
    P_REPLY    OUT VARCHAR2
) AS
    V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
    V_ID_USER  USUARIOS_INFO.ID_USER%TYPE := 0;
    V_RANDOM_PASS  USUARIOS.PASSWORD%TYPE := 0;
BEGIN
    SELECT -- Podria ser un cursor
        ID_USUARIO_INFO,
        ID_USER
    INTO 
        V_ID_USUARIO_INFO,
        V_ID_USER
    FROM
        USUARIOS_INFO
    WHERE
        CORREO = P_CORREO;

    IF V_ID_USUARIO_INFO = 0 THEN
        P_REPLY := 'No existe una cuenta con el correo ingresado';
    ELSE
        V_RANDOM_PASS := DBMS_RANDOM.string('x',10);
        
        DYNAMIC_UPDATE('USUARIOS', 'PASSWORD', V_RANDOM_PASS, 'ID_USER = ' || TO_CHAR(V_ID_USER));
            
        P_CLAVE := V_RANDOM_PASS;
        P_REPLY := 'Contrasenha temporal creada!';
    END IF;
END;

DECLARE
    -- PARAMETERS
    P_CORREO USUARIOS_INFO.CORREO%TYPE := 'joemesoto@gmail.com';
    P_CLAVE VARCHAR2(200);
    P_REPLY VARCHAR2(200);
BEGIN
    RECUPERAR_CUENTA(P_CORREO, P_CLAVE, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_CLAVE);
    DBMS_OUTPUT.PUT_LINE(P_REPLY);
END;

SELECT * FROM USUARIOS;

-- AGREGAR_CUENTA_BANCARIA Stored Procedure
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE AGREGAR_CUENTA_BANCARIA';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE AGREGAR_CUENTA_BANCARIA (
    P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_ID_DIVISA   IN CUENTAS.ID_DIVISA%TYPE,
    P_ID_MOVIMIENTO  IN CUENTAS.ID_MOVIMIENTO%TYPE,
    P_IBAN   IN CUENTAS.IBAN%TYPE,
    P_SALDO_TOTAL   IN CUENTAS.SALDO_TOTAL%TYPE,
    P_SALDO_ACTUAL   IN CUENTAS.SALDO_ACTUAL%TYPE,
    P_SALDO_RETENIDO   IN CUENTAS.SALDO_RETENIDO%TYPE,
    P_CREDITO   IN CUENTAS.CREDITO%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
    V_ID_CUENTA CUENTAS.ID_CUENTA %TYPE := 0;
BEGIN
    SELECT
        GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
    INTO
        V_ID_USER
    FROM
        DUAL;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        
        SELECT
            GET_ID_CUENTA(P_DATA => P_IBAN, P_BY => 'IBAN')
        INTO
            V_ID_CUENTA
        FROM
            DUAL;
        
        IF V_ID_CUENTA = 0 THEN
            INSERT INTO CUENTAS
                (ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL,  SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
            VALUES
                (P_ID_USER, P_ID_DIVISA, P_ID_MOVIMIENTO, P_IBAN, P_SALDO_TOTAL,  P_SALDO_ACTUAL, P_SALDO_RETENIDO, P_CREDITO);

            P_REPLY := 'Tarjeta agregada correctamente';
            
        ELSE
            P_REPLY := 'Cuenta ya existe';
        END IF;
    END IF;
END;

DECLARE
    -- PARAMETERS
    P_ID_USER CUENTAS.ID_USER%TYPE := 1;
    P_ID_DIVISA CUENTAS.ID_DIVISA%TYPE  := 1;
    P_ID_MOVIMIENTO CUENTAS.ID_MOVIMIENTO%TYPE  := 1;
    P_IBAN   CUENTAS.IBAN%TYPE := 'CRTEST';
    P_SALDO_TOTAL   CUENTAS.SALDO_TOTAL%TYPE := 0;
    P_SALDO_ACTUAL   CUENTAS.SALDO_ACTUAL%TYPE := 0;
    P_SALDO_RETENIDO   CUENTAS.SALDO_RETENIDO%TYPE := 0;
    P_CREDITO    CUENTAS.CREDITO%TYPE := 1;
    P_REPLY VARCHAR2(100);
BEGIN
    AGREGAR_CUENTA_BANCARIA(P_ID_USER, P_ID_DIVISA, P_ID_MOVIMIENTO, P_IBAN, P_SALDO_TOTAL, P_SALDO_ACTUAL, P_SALDO_RETENIDO, P_CREDITO, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_REPLY);
END;

SELECT * FROM CUENTAS WHERE ID_USER = 1;

-- ELIMINAR_CUENTA_BANCARIA Stored Procedure
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE ELIMINAR_CUENTA_BANCARIA';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE ELIMINAR_CUENTA_BANCARIA (
    P_IBAN IN CUENTAS.IBAN%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_CUENTA  CUENTAS.ID_CUENTA%TYPE := 0;
BEGIN
    SELECT
        GET_ID_CUENTA(P_DATA => P_IBAN, P_BY => 'IBAN')
    INTO
        V_ID_CUENTA
    FROM
        DUAL;

    IF V_ID_CUENTA = 0 THEN
        P_REPLY := 'Cuenta bancaria no existe';
    ELSE
        DYNAMIC_DELETE('CUENTAS', 'IBAN = ' || '''' ||  P_IBAN || '''');
            
        P_REPLY := 'Cuenta bancaria eliminada correctamente';
    END IF;
END;

DECLARE
    -- PARAMETERS
    P_IBAN CUENTAS.IBAN%TYPE := 'CRTEST';
    P_REPLY VARCHAR2(100);
BEGIN
    ELIMINAR_CUENTA_BANCARIA(P_IBAN, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_REPLY);
END;

SELECT * FROM CUENTAS WHERE IBAN = 'CRTEST';


-- CARGAR_CUENTAS_BANCARIAS Stored Procedure
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE CARGAR_CUENTAS_BANCARIAS';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE CARGAR_CUENTAS_BANCARIAS (
    P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_CUENTAS OUT SYS_REFCURSOR,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
    INTO
        V_ID_USER
    FROM
        DUAL;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        OPEN P_CUENTAS FOR SELECT
                               *
                           FROM
                               CUENTAS
                           WHERE
                               ID_USER = P_ID_USER;

    END IF;
END;


DECLARE
    -- PARAMETERS
    P_ID_USER CUENTAS.ID_USER%TYPE := 1;
    P_CUENTAS SYS_REFCURSOR;
    P_REPLY VARCHAR2(200);
    -- CURSOR
    ID_CUENTA CUENTAS.ID_CUENTA%TYPE;
    ID_USER CUENTAS.ID_USER%TYPE;
    ID_DIVISA CUENTAS.ID_DIVISA%TYPE;
    ID_MOVIMIENTO CUENTAS.ID_MOVIMIENTO%TYPE;
    IBAN CUENTAS.IBAN%TYPE;
    SALDO_TOTAL CUENTAS.SALDO_TOTAL%TYPE;
    SALDO_ACTUAL CUENTAS.SALDO_ACTUAL%TYPE;
    SALDO_RETENIDO CUENTAS.SALDO_RETENIDO%TYPE;
    CREDITO CUENTAS.CREDITO%TYPE;
BEGIN
    CARGAR_CUENTAS_BANCARIAS(P_ID_USER, P_CUENTAS, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_REPLY);
    
    LOOP
        FETCH P_CUENTAS 
        INTO ID_CUENTA, ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL, SALDO_ACTUAL, SALDO_RETENIDO, CREDITO;
        EXIT WHEN P_CUENTAS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ID_CUENTA || ID_USER || ID_DIVISA || ID_MOVIMIENTO || IBAN || SALDO_TOTAL || SALDO_ACTUAL  || SALDO_RETENIDO || CREDITO);
    END LOOP;
    
    CLOSE P_CUENTAS;  
END;

-- CARGAR_SERVICIOS Stored Procedure
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE CARGAR_SERVICIOS';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE CARGAR_SERVICIOS (
    P_SERVICIOS OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN P_SERVICIOS FOR SELECT
                           *
                       FROM
                           SERVICIOS;
END;

DECLARE
    -- PARAMETERS
    P_SERVICIOS SYS_REFCURSOR;
    -- CURSOR
    ID_SERVICIO SERVICIOS.ID_SERVICIO%TYPE;
    ID_EMPRESA SERVICIOS.ID_EMPRESA%TYPE;
    DESCRIPCION SERVICIOS.DESCRIPCION%TYPE;
BEGIN
    CARGAR_SERVICIOS(P_SERVICIOS);

    LOOP
        FETCH P_SERVICIOS 
        INTO ID_SERVICIO, ID_EMPRESA, DESCRIPCION;
        EXIT WHEN P_SERVICIOS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ID_SERVICIO || ID_EMPRESA || DESCRIPCION);
    END LOOP;
    
    CLOSE P_SERVICIOS;  
END;

-- VERIFICAR_FACTURA Stored Procedure
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE VERIFICAR_FACTURA';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE VERIFICAR_FACTURA (
    P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
    P_FACTURA OUT SYS_REFCURSOR,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
    INTO
        V_ID_USER
    FROM
        DUAL;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        OPEN P_FACTURA FOR SELECT
                               F.ID_FACTURA,
                               F.ID_TRANSACCION,
                               F.ID_SERVICIO,
                               F.ID_STATUS
                           FROM
                                    FACTURAS F
                               INNER JOIN HISTORIAL_TRANSACCIONES HT
                                ON F.ID_TRANSACCION = HT.ID_TRANSACCION
                           WHERE
                                   F.ID_SERVICIO = P_ID_SERVICIO
                               AND HT.ID_USER = P_ID_USER
                               AND F.ID_STATUS = 300;
    END IF;
END;

DECLARE
    -- PARAMETERS
    P_ID_USER CUENTAS.ID_USER%TYPE := 1;
    P_ID_SERVICIO FACTURAS.ID_SERVICIO%TYPE := 1;
    P_FACTURA SYS_REFCURSOR;
    P_REPLY VARCHAR2(200);
    -- CURSOR
    ID_FACTURA FACTURAS.ID_FACTURA%TYPE;
    ID_TRANSACCION FACTURAS.ID_TRANSACCION%TYPE;
    ID_SERVICIO FACTURAS.ID_SERVICIO%TYPE;
    ID_STATUS FACTURAS.ID_STATUS%TYPE;
BEGIN
    VERIFICAR_FACTURA(P_ID_USER, P_ID_SERVICIO, P_FACTURA, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_REPLY);
    
    LOOP
        FETCH P_FACTURA 
        INTO ID_FACTURA, ID_TRANSACCION, ID_SERVICIO, ID_STATUS;
        EXIT WHEN P_FACTURA%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ID_FACTURA || ID_TRANSACCION || ID_SERVICIO || ID_STATUS);
    END LOOP;
    
    CLOSE P_FACTURA;  
END;

-- CARGAR_HISTORIAL_TRANSACCIONES Stored Procedure 
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE CARGAR_HISTORIAL_TRANSACCIONES';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE CARGAR_HISTORIAL_TRANSACCIONES (
    P_ID_USER       IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
    P_ID_CUENTA     IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
    P_TRANSACCIONES OUT SYS_REFCURSOR,
    P_REPLY         OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
BEGIN
    SELECT
        GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
    INTO
        V_ID_USER
    FROM
        DUAL;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        OPEN P_TRANSACCIONES FOR SELECT
                                     *
                                 FROM
                                     HISTORIAL_TRANSACCIONES
                                 WHERE
                                         ID_CUENTA_ORIGEN = P_ID_CUENTA
                                     OR  ID_CUENTA_DESTINO = P_ID_CUENTA;
    END IF;
END;

DECLARE
    -- PARAMETERS
    P_ID_USER HISTORIAL_TRANSACCIONES.ID_USER%TYPE := 1;
    P_ID_CUENTA HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE := 1;
    P_TRANSACCIONES SYS_REFCURSOR;
    P_REPLY VARCHAR2(200);
    -- CURSOR
    ID_TRANSACCION HISTORIAL_TRANSACCIONES.ID_TRANSACCION%TYPE;
    ID_USER HISTORIAL_TRANSACCIONES.ID_USER%TYPE;
    ID_CUENTA_ORIGEN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE;
    ID_CUENTA_DESTINO HISTORIAL_TRANSACCIONES.ID_CUENTA_DESTINO%TYPE;
    ID_STATUS HISTORIAL_TRANSACCIONES.ID_STATUS%TYPE;
    MONTO HISTORIAL_TRANSACCIONES.MONTO%TYPE;
    DESCRIPCION HISTORIAL_TRANSACCIONES.DESCRIPCION%TYPE;
BEGIN
    CARGAR_HISTORIAL_TRANSACCIONES(P_ID_USER, P_ID_CUENTA, P_TRANSACCIONES, P_REPLY);

    DBMS_OUTPUT.PUT_LINE(P_REPLY);
    
    LOOP
        FETCH P_TRANSACCIONES 
        INTO ID_TRANSACCION, ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION;
        EXIT WHEN P_TRANSACCIONES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(ID_TRANSACCION || ID_USER || ID_CUENTA_ORIGEN || ID_CUENTA_DESTINO || ID_STATUS || MONTO || DESCRIPCION);
    END LOOP;
    
    CLOSE P_TRANSACCIONES;  
END;

-- PAGAR_FACTURA Stored Procedure 
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE PAGAR_FACTURA';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE PAGAR_FACTURA (
    P_ID_FACTURA IN FACTURAS.ID_FACTURA%TYPE,
    P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
    P_MONTO IN FACTURAS.ID_SERVICIO%TYPE,
    P_REPLY OUT VARCHAR2
) AS
    V_ID_USER CUENTAS.ID_USER%TYPE := 0;
    V_ID_TRANSACCION FACTURAS.ID_TRANSACCION%TYPE;
    V_SALDO_ACTUAL_ORIGEN CUENTAS.SALDO_ACTUAL%TYPE;
    V_SALDO_ACTUAL_DESTINO CUENTAS.SALDO_ACTUAL%TYPE;
    V_ID_CUENTA_ORIGEN CUENTAS.ID_CUENTA%TYPE;
    V_ID_CUENTA_DESTINO CUENTAS.ID_CUENTA%TYPE;
    V_DESCRIPCION HISTORIAL_TRANSACCIONES.DESCRIPCION%TYPE;
BEGIN
    SELECT
        GET_ID_USER(P_DATA => TO_CHAR(P_ID_USER), P_DATA2 => '', P_BY => 'ID_USER')
    INTO
        V_ID_USER
    FROM
        DUAL;

    IF V_ID_USER = 0 THEN
        P_REPLY := 'Usuario no existe';
    ELSE
        SELECT
            ID_TRANSACCION
        INTO V_ID_TRANSACCION
        FROM
            FACTURAS
        WHERE
            ID_FACTURA = P_ID_FACTURA;
            
        SELECT 
            C1.SALDO_TOTAL,
            C2.SALDO_TOTAL,
            HT.DESCRIPCION
        INTO
            V_SALDO_ACTUAL_ORIGEN,
            V_SALDO_ACTUAL_DESTINO,
            V_DESCRIPCION
        FROM
            HISTORIAL_TRANSACCIONES HT
            INNER JOIN CUENTAS C1
                 ON HT.ID_CUENTA_ORIGEN = C1.ID_CUENTA
            INNER JOIN CUENTAS C2
                 ON HT.ID_CUENTA_DESTINO = C2.ID_CUENTA
        WHERE
            ID_TRANSACCION = V_ID_TRANSACCION;
            
        IF V_SALDO_ACTUAL_ORIGEN > P_MONTO THEN
            P_REPLY := 'Usuario no tiene el monto disponible';
        ELSE
            INSERT INTO 
                HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
            VALUES
                (V_ID_USER, V_ID_CUENTA_ORIGEN, V_ID_CUENTA_DESTINO, 200, P_MONTO, V_DESCRIPCION);

            UPDATE FACTURAS
                            SET
                        ID_STATUS = 200
                    WHERE
                        ID_FACTURA = ID_FACTURA;
        END IF;

    END IF;
END;

-- TRANSFERENCIA Stored Procedure 
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP PROCEDURE TRANSFERENCIA';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4043 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE PROCEDURE TRANSFERENCIA (
        P_ID_TRANSACCION IN HISTORIAL_TRANSACCIONES.ID_TRANSACCION%TYPE,
        P_ID_USER IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
        P_ID_CUENTA_ORIGEN IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
        P_ID_CUENTA_DESTINO HISTORIAL_TRANSACCIONES.ID_CUENTA_DESTINO%TYPE,
        P_MONTO IN HISTORIAL_TRANSACCIONES.MONTO%TYPE,
        P_REPLY OUT VARCHAR2
    ) AS
        V_ID_USER CUENTAS.ID_USER%TYPE := 0;
        V_ID_TRANSACCION FACTURAS.ID_TRANSACCION%TYPE;
        V_SALDO_ACTUAL_ORIGEN CUENTAS.SALDO_ACTUAL%TYPE;
        V_SALDO_ACTUAL_DESTINO CUENTAS.SALDO_ACTUAL%TYPE;
        V_ID_CUENTA_ORIGEN CUENTAS.ID_CUENTA%TYPE;
        V_ID_CUENTA_DESTINO CUENTAS.ID_CUENTA%TYPE;
        V_DESCRIPCION HISTORIAL_TRANSACCIONES.DESCRIPCION%TYPE;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => TO_CHAR(P_ID_USER), P_DATA2 => '',  P_BY => 'ID_USER')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_REPLY := 'Usuario no existe';
        ELSE
            SELECT
                ID_TRANSACCION
            INTO V_ID_TRANSACCION
            FROM
                HISTORIAL_TRANSACCIONES
            WHERE
                ID_TRANSACCION = P_ID_TRANSACCION;
                
            SELECT
                C1.SALDO_TOTAL,
                C2.SALDO_TOTAL,
                HT.DESCRIPCION
            INTO
                V_SALDO_ACTUAL_ORIGEN,
                V_SALDO_ACTUAL_DESTINO,
                V_DESCRIPCION
            FROM
                HISTORIAL_TRANSACCIONES HT
                INNER JOIN CUENTAS C1
                     ON HT.ID_CUENTA_ORIGEN = C1.ID_CUENTA
                INNER JOIN CUENTAS C2
                     ON HT.ID_CUENTA_DESTINO = C2.ID_CUENTA
            WHERE
                ID_TRANSACCION = V_ID_TRANSACCION;
                
            IF V_SALDO_ACTUAL_ORIGEN > P_MONTO THEN
                P_REPLY := 'Usuario no tiene el monto disponible';
            ELSE
                INSERT INTO 
                    HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
                VALUES
                    (V_ID_USER, V_ID_CUENTA_ORIGEN, V_ID_CUENTA_DESTINO, 200, P_MONTO, V_DESCRIPCION);
    
                UPDATE HISTORIAL_TRANSACCIONES
                SET
                    ID_STATUS = 200
                WHERE
                    ID_TRANSACCION = V_ID_TRANSACCION;
            END IF;
    
        END IF;
END;

-- Triggers
--------------------------------------------------------------------------------------------------------------------------------
-- SALDO_ACTUAL Trigger
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER UPDATE_SALDO_ACTUAL';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4080 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE TRIGGER UPDATE_SALDO_ACTUAL 
    AFTER 
    INSERT 
    ON HISTORIAL_TRANSACCIONES
    FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.ID_STATUS = 200 THEN
        UPDATE CUENTAS
                    SET
                SALDO_ACTUAL = SALDO_ACTUAL - :NEW.MONTO
            WHERE
                ID_CUENTA = :NEW.ID_CUENTA_ORIGEN;
                
        UPDATE CUENTAS
                    SET
                SALDO_ACTUAL = SALDO_ACTUAL + :NEW.MONTO
            WHERE
                ID_CUENTA = :NEW.ID_CUENTA_DESTINO;
    END IF;
END;

SELECT * FROM CUENTAS WHERE ID_CUENTA = 1;

SELECT * FROM CUENTAS WHERE ID_CUENTA = 2;

INSERT INTO HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
VALUES
(1, 1, 2, 200, 5000, 'Test 1');

SELECT * FROM CUENTAS WHERE ID_CUENTA = 1;

SELECT * FROM CUENTAS WHERE ID_CUENTA = 2;

-- UPDATE_SALDO_TOTAL Trigger
----------------------------------------------------------
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER UPDATE_SALDO_TOTAL';
EXCEPTION WHEN OTHERS THEN
   IF SQLCODE != -4080 THEN
      RAISE;
   END IF;
END;

CREATE OR REPLACE TRIGGER UPDATE_SALDO_TOTAL 
    AFTER 
    UPDATE 
    ON CUENTAS
    FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.SALDO_ACTUAL != :OLD.SALDO_ACTUAL THEN
        UPDATE CUENTAS
                    SET
                SALDO_TOTAL = :NEW.SALDO_ACTUAL + :NEW.SALDO_RETENIDO
            WHERE
                ID_CUENTA = :NEW.ID_CUENTA;
    END IF;
END;

SELECT * FROM CUENTAS WHERE ID_CUENTA = 1;

SELECT * FROM CUENTAS WHERE ID_CUENTA = 2;

INSERT INTO HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
VALUES
(1, 1, 2, 200, 5000, 'Test 1');

SELECT * FROM CUENTAS WHERE ID_CUENTA = 1;

SELECT * FROM CUENTAS WHERE ID_CUENTA = 2;

-- Packages
--------------------------------------------------------------------------------------------------------------------------------
-- USERS Package
----------------------------------------------------------
BEGIN
  EXECUTE IMMEDIATE 'DROP PACKAGE PKG_USERS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -4043 THEN
      RAISE;
    END IF;
END;

CREATE PACKAGE PKG_USERS AS 
   FUNCTION GET_ID_USER(P_DATA IN VARCHAR2,
    P_DATA2 IN VARCHAR2,
    P_BY IN VARCHAR2) RETURN NUMBER; 
    
    FUNCTION GET_ID_USUARIO_INFO(P_DATA IN VARCHAR2,
    P_BY IN VARCHAR2) RETURN NUMBER;
    
    FUNCTION GET_ID_CUENTA(P_DATA IN VARCHAR2,
    P_BY IN VARCHAR2) RETURN NUMBER;
    
    PROCEDURE AGREGAR_USUARIO(P_USERNAME IN USUARIOS.USERNAME%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_NOMBRE IN USUARIOS_INFO.NOMBRE%TYPE,
    P_APELLIDO IN USUARIOS_INFO.APELLIDO%TYPE,
    P_CEDULA IN USUARIOS_INFO.CEDULA%TYPE,
    P_TELEFONO IN USUARIOS_INFO.TELEFONO%TYPE,
    P_CORREO IN USUARIOS_INFO.CORREO%TYPE,
    P_DIRECCION IN USUARIOS_INFO.DIRECCION%TYPE,
    P_REPLY    OUT VARCHAR2);
    
    PROCEDURE VALIDAR_SESION(P_USERNAME IN USUARIOS.USERNAME%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_ID_USER  OUT USUARIOS.ID_USER%TYPE,
    P_USUARIO_INFO OUT SYS_REFCURSOR,
    P_REPLY    OUT VARCHAR2);
    
    PROCEDURE EDITAR_INFORMACION_USUARIO(P_ID_USER   IN USUARIOS.ID_USER%TYPE,
    P_TELEFONO  IN USUARIOS_INFO.TELEFONO%TYPE,
    P_CORREO    IN USUARIOS_INFO.CORREO%TYPE,
    P_DIRECCION IN USUARIOS_INFO.DIRECCION%TYPE,
    P_REPLY     OUT VARCHAR2);
    
    PROCEDURE CAMBIAR_PASSWORD(P_ID_USER  IN USUARIOS.ID_USER%TYPE,
    P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
    P_REPLY    OUT VARCHAR2);
    
    PROCEDURE RECUPERAR_CUENTA(P_CORREO   IN USUARIOS_INFO.CORREO%TYPE,
    P_CLAVE    OUT USUARIOS.PASSWORD%TYPE,
    P_REPLY    OUT VARCHAR2);
    
    PROCEDURE DYNAMIC_UPDATE(P_TABLE IN VARCHAR2,
    P_COLUMN IN VARCHAR2,
    P_VALUE IN VARCHAR2,
    P_WHERE IN VARCHAR2);
    
END PKG_USERS;

CREATE OR REPLACE PACKAGE BODY PKG_USERS AS  
    FUNCTION GET_ID_USER (
        P_DATA IN VARCHAR2,
        P_DATA2 IN VARCHAR2,
        P_BY IN VARCHAR2
    ) RETURN NUMBER IS
        V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
    BEGIN
        CASE P_BY
            WHEN 'ID_USER' THEN
                SELECT
                    ID_USER
                INTO
                    V_ID_USER
                FROM
                    USUARIOS
                WHERE
                    ID_USER = TO_NUMBER(P_DATA);
                    
                RETURN (V_ID_USER);
            WHEN 'USERNAME' THEN
                SELECT
                    ID_USER
                INTO
                    V_ID_USER
                FROM
                    USUARIOS
                WHERE
                    USERNAME = P_DATA;
                    
                RETURN (V_ID_USER);
            WHEN 'PASSWORD' THEN
                SELECT
                    ID_USER
                INTO
                    V_ID_USER
                FROM
                    USUARIOS
                WHERE
                        USERNAME = P_DATA
                    AND PASSWORD = P_DATA2;
                    
                RETURN (V_ID_USER);
        END CASE;
        
        EXCEPTION WHEN NO_DATA_FOUND THEN
            RETURN (V_ID_USER);
    END GET_ID_USER;
    
    FUNCTION GET_ID_USUARIO_INFO (
        P_DATA IN VARCHAR2,
        P_BY IN VARCHAR2
    ) RETURN NUMBER IS
        V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
    BEGIN
        CASE P_BY
            WHEN 'ID_USER' THEN
                SELECT
                    ID_USUARIO_INFO
                INTO V_ID_USUARIO_INFO
                FROM
                    USUARIOS_INFO
                WHERE
                    ID_USER = TO_NUMBER(P_DATA);
                    
                RETURN (V_ID_USUARIO_INFO);
        END CASE;
        
        EXCEPTION WHEN NO_DATA_FOUND THEN
            RETURN (V_ID_USUARIO_INFO);
    END GET_ID_USUARIO_INFO;
    
    FUNCTION GET_ID_CUENTA (
        P_DATA IN VARCHAR2,
        P_BY IN VARCHAR2
    ) RETURN NUMBER IS
        V_ID_CUENTA CUENTAS.ID_CUENTA%TYPE := 0;
    BEGIN
        CASE P_BY
            WHEN 'IBAN' THEN
                SELECT
                    ID_CUENTA
                INTO
                    V_ID_CUENTA
                FROM
                    CUENTAS
                WHERE
                    IBAN = P_DATA;
                    
                RETURN (V_ID_CUENTA);
        END CASE;
        
        EXCEPTION WHEN NO_DATA_FOUND THEN
            RETURN (V_ID_CUENTA);
    END GET_ID_CUENTA;
    
    PROCEDURE AGREGAR_USUARIO (
        P_USERNAME IN USUARIOS.USERNAME%TYPE,
        P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
        P_NOMBRE IN USUARIOS_INFO.NOMBRE%TYPE,
        P_APELLIDO IN USUARIOS_INFO.APELLIDO%TYPE,
        P_CEDULA IN USUARIOS_INFO.CEDULA%TYPE,
        P_TELEFONO IN USUARIOS_INFO.TELEFONO%TYPE,
        P_CORREO IN USUARIOS_INFO.CORREO%TYPE,
        P_DIRECCION IN USUARIOS_INFO.DIRECCION%TYPE,
        P_REPLY    OUT VARCHAR2
    ) AS
        V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => P_USERNAME, P_DATA2 => '', P_BY => 'USERNAME')
        INTO
            V_ID_USER
        FROM
            DUAL;
            
        IF V_ID_USER != 0 THEN
            P_REPLY := 'Usuario ya existe';
        END IF;
        
        IF V_ID_USER = 0 THEN
            INSERT INTO USUARIOS
                (USERNAME, PASSWORD, INTENTOS)
            VALUES
                (P_USERNAME, P_PASSWORD, 0);
                
            SELECT
                GET_ID_USER(P_DATA => P_USERNAME, P_DATA2 => P_PASSWORD, P_BY => 'PASSWORD')
            INTO
                V_ID_USER
            FROM
                DUAL;
                
            INSERT INTO USUARIOS_INFO
                (ID_USER, ID_CEDULA, NOMBRE, APELLIDO, CEDULA, TELEFONO, CORREO, DIRECCION)
            VALUES
                (V_ID_USER, 1, P_NOMBRE, P_APELLIDO, P_CEDULA,  P_TELEFONO, P_CORREO, P_DIRECCION);
            
            P_REPLY := 'Usuario creado correctamente';
        END IF;
    END AGREGAR_USUARIO;
    
    PROCEDURE VALIDAR_SESION (
        P_USERNAME IN USUARIOS.USERNAME%TYPE,
        P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
        P_ID_USER  OUT USUARIOS.ID_USER%TYPE,
        P_USUARIO_INFO OUT SYS_REFCURSOR,
        P_REPLY    OUT VARCHAR2
    ) AS
        V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => P_USERNAME, P_DATA2 => P_PASSWORD, P_BY => 'PASSWORD')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_ID_USER := 0;
            P_REPLY := 'Usuario o contrasenha incorrecto, trate de nuevo';
        ELSE
            P_ID_USER := V_ID_USER;
            P_REPLY := 'Bienvenido ' || P_USERNAME; --Podria hacer un SELECT para agarrar el nombre
            OPEN P_USUARIO_INFO FOR SELECT * FROM USUARIOS_INFO WHERE ID_USER = V_ID_USER;
        END IF;
    END VALIDAR_SESION;
    
    PROCEDURE EDITAR_INFORMACION_USUARIO (
        P_ID_USER   IN USUARIOS.ID_USER%TYPE,
        P_TELEFONO  IN USUARIOS_INFO.TELEFONO%TYPE,
        P_CORREO    IN USUARIOS_INFO.CORREO%TYPE,
        P_DIRECCION IN USUARIOS_INFO.DIRECCION%TYPE,
        P_REPLY     OUT VARCHAR2
    ) AS
        V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
    BEGIN
        SELECT
            GET_ID_USUARIO_INFO(P_DATA => TO_CHAR(P_ID_USER), P_BY => 'ID_USER')
        INTO 
            V_ID_USUARIO_INFO
        FROM
            DUAL;
    
        IF V_ID_USUARIO_INFO = 0 THEN
            P_REPLY := 'NE';
        END IF;
        
        IF P_TELEFONO IS NOT NULL THEN
        
            DYNAMIC_UPDATE('USUARIOS_INFO', 'TELEFONO', TO_CHAR(P_TELEFONO), 'ID_USUARIO_INFO = ' || TO_CHAR(V_ID_USUARIO_INFO));
        
            P_REPLY := 'SE/CO';
        END IF;
        
        IF P_CORREO IS NOT NULL THEN
        
            DYNAMIC_UPDATE('USUARIOS_INFO', 'CORREO', P_CORREO, 'ID_USUARIO_INFO = ' || TO_CHAR(V_ID_USUARIO_INFO));
            
            P_REPLY := 'SE/TE';
        END IF;
        
        IF P_DIRECCION IS NOT NULL THEN
        
            DYNAMIC_UPDATE('USUARIOS_INFO', 'DIRECCION', P_DIRECCION, 'ID_USUARIO_INFO = ' || TO_CHAR(V_ID_USUARIO_INFO));
    
            P_REPLY := 'SE';
        END IF;
    
    END EDITAR_INFORMACION_USUARIO;
    
    PROCEDURE CAMBIAR_PASSWORD (
        P_ID_USER  IN USUARIOS.ID_USER%TYPE,
        P_PASSWORD IN USUARIOS.PASSWORD%TYPE,
        P_REPLY    OUT VARCHAR2
    ) AS
        V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
        V_RANDOM_PASS VARCHAR2(200);
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => TO_CHAR(P_ID_USER), P_DATA2 => '', P_BY => 'ID_USER')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_REPLY := 'Usuario no existe';
        ELSE
            DYNAMIC_UPDATE('USUARIOS', 'PASSWORD', P_PASSWORD, 'ID_USER = ' || TO_CHAR(V_ID_USER));
            
            P_REPLY := 'Contrasenha modificada correctamente';
        END IF;
    
    END CAMBIAR_PASSWORD;
    
    PROCEDURE RECUPERAR_CUENTA (
        P_CORREO   IN USUARIOS_INFO.CORREO%TYPE,
        P_CLAVE    OUT USUARIOS.PASSWORD%TYPE,
        P_REPLY    OUT VARCHAR2
    ) AS
        V_ID_USUARIO_INFO USUARIOS_INFO.ID_USUARIO_INFO%TYPE := 0;
        V_ID_USER  USUARIOS_INFO.ID_USER%TYPE := 0;
        V_RANDOM_PASS  USUARIOS.PASSWORD%TYPE := 0;
    BEGIN
        SELECT
            ID_USUARIO_INFO,
            ID_USER
        INTO 
            V_ID_USUARIO_INFO,
            V_ID_USER
        FROM
            USUARIOS_INFO
        WHERE
            CORREO = P_CORREO;
    
        IF V_ID_USUARIO_INFO = 0 THEN
            P_REPLY := 'No existe una cuenta con el correo ingresado';
        ELSE
            V_RANDOM_PASS := DBMS_RANDOM.string('x',10);
            
            DYNAMIC_UPDATE('USUARIOS', 'PASSWORD', V_RANDOM_PASS, 'ID_USER = ' || TO_CHAR(V_ID_USER));
                
            P_CLAVE := V_RANDOM_PASS;
            P_REPLY := 'Contrasenha temporal creada!';
        END IF;
    END RECUPERAR_CUENTA;
    
    PROCEDURE DYNAMIC_UPDATE (
        P_TABLE IN VARCHAR2,
        P_COLUMN IN VARCHAR2,
        P_VALUE IN VARCHAR2,
        P_WHERE IN VARCHAR2
    ) AS
        UPDATE_SQL VARCHAR2(300);
    BEGIN
        UPDATE_SQL := 'UPDATE ' || P_TABLE ||
            ' SET ' || P_COLUMN ||' = ' || '''' ||  P_VALUE || '''' ||
            ' WHERE ' || P_WHERE;
        
        EXECUTE IMMEDIATE UPDATE_SQL;
    END;

END PKG_USERS; 

-- CUENTAS Package
----------------------------------------------------------
BEGIN
  EXECUTE IMMEDIATE 'DROP PACKAGE PKG_CUENTAS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -4043 THEN
      RAISE;
    END IF;
END;

CREATE PACKAGE PKG_CUENTAS AS 
   PROCEDURE AGREGAR_CUENTA_BANCARIA(P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_ID_DIVISA   IN CUENTAS.ID_DIVISA%TYPE,
    P_ID_MOVIMIENTO  IN CUENTAS.ID_MOVIMIENTO%TYPE,
    P_IBAN   IN CUENTAS.IBAN%TYPE,
    P_SALDO_TOTAL   IN CUENTAS.SALDO_TOTAL%TYPE,
    P_SALDO_ACTUAL   IN CUENTAS.SALDO_ACTUAL%TYPE,
    P_SALDO_RETENIDO   IN CUENTAS.SALDO_RETENIDO%TYPE,
    P_CREDITO   IN CUENTAS.CREDITO%TYPE,
    P_REPLY OUT VARCHAR2); 
    
    PROCEDURE ELIMINAR_CUENTA_BANCARIA(P_IBAN IN CUENTAS.IBAN%TYPE,
    P_REPLY OUT VARCHAR2);
    
    PROCEDURE CARGAR_CUENTAS_BANCARIAS(P_ID_USER IN CUENTAS.ID_USER%TYPE,
    P_CUENTAS OUT SYS_REFCURSOR,
    P_REPLY OUT VARCHAR2);
    
    PROCEDURE CARGAR_HISTORIAL_TRANSACCIONES(P_ID_USER       IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
    P_ID_CUENTA     IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
    P_TRANSACCIONES OUT SYS_REFCURSOR,
    P_REPLY         OUT VARCHAR2);
    
    PROCEDURE TRANSFERENCIA(P_ID_TRANSACCION IN HISTORIAL_TRANSACCIONES.ID_TRANSACCION%TYPE,
    P_ID_USER IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
    P_ID_CUENTA_ORIGEN IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
    P_ID_CUENTA_DESTINO HISTORIAL_TRANSACCIONES.ID_CUENTA_DESTINO%TYPE,
    P_MONTO IN HISTORIAL_TRANSACCIONES.MONTO%TYPE,
    P_REPLY OUT VARCHAR2);
    
    PROCEDURE DYNAMIC_UPDATE(P_TABLE IN VARCHAR2,
    P_COLUMN IN VARCHAR2,
    P_VALUE IN VARCHAR2,
    P_WHERE IN VARCHAR2);
    
    PROCEDURE DYNAMIC_DELETE(P_TABLE IN VARCHAR2,
    P_WHERE IN VARCHAR2);
END PKG_CUENTAS;

CREATE OR REPLACE PACKAGE BODY PKG_CUENTAS AS  
    PROCEDURE AGREGAR_CUENTA_BANCARIA (
        P_ID_USER IN CUENTAS.ID_USER%TYPE,
        P_ID_DIVISA   IN CUENTAS.ID_DIVISA%TYPE,
        P_ID_MOVIMIENTO  IN CUENTAS.ID_MOVIMIENTO%TYPE,
        P_IBAN   IN CUENTAS.IBAN%TYPE,
        P_SALDO_TOTAL   IN CUENTAS.SALDO_TOTAL%TYPE,
        P_SALDO_ACTUAL   IN CUENTAS.SALDO_ACTUAL%TYPE,
        P_SALDO_RETENIDO   IN CUENTAS.SALDO_RETENIDO%TYPE,
        P_CREDITO   IN CUENTAS.CREDITO%TYPE,
        P_REPLY OUT VARCHAR2
    ) AS
        V_ID_USER  USUARIOS.ID_USER%TYPE := 0;
        V_ID_CUENTA  CUENTAS.ID_CUENTA%TYPE := 0;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_REPLY := 'Usuario no existe';
        ELSE
            SELECT
                GET_ID_CUENTA(P_DATA => P_IBAN, P_BY => 'IBAN')
            INTO
                V_ID_CUENTA
            FROM
                DUAL;
                
            IF V_ID_CUENTA != 0 THEN
                P_REPLY := 'Cuenta ya existe';
            ELSE
                INSERT INTO CUENTAS
                    (ID_USER, ID_DIVISA, ID_MOVIMIENTO, IBAN, SALDO_TOTAL,  SALDO_ACTUAL, SALDO_RETENIDO, CREDITO)
                VALUES
                    (P_ID_USER, P_ID_DIVISA, P_ID_MOVIMIENTO, P_IBAN, P_SALDO_TOTAL,  P_SALDO_ACTUAL, P_SALDO_RETENIDO, P_CREDITO);
                    
                P_REPLY := 'Tarjeta agregada correctamente';
            END IF;
        END IF;
    END AGREGAR_CUENTA_BANCARIA;
    
    PROCEDURE ELIMINAR_CUENTA_BANCARIA (
        P_IBAN IN CUENTAS.IBAN%TYPE,
        P_REPLY OUT VARCHAR2
    ) AS
        V_ID_CUENTA  CUENTAS.ID_CUENTA%TYPE := 0;
    BEGIN
        SELECT
            GET_ID_CUENTA(P_DATA => P_IBAN, P_BY => 'IBAN')
        INTO
            V_ID_CUENTA
        FROM
            DUAL;
    
        IF V_ID_CUENTA = 0 THEN
            P_REPLY := 'Cuenta bancaria no existe';
        ELSE
            DYNAMIC_DELETE('CUENTAS', 'IBAN = ' || '''' ||  P_IBAN || '''');
                
            P_REPLY := 'Cuenta bancaria eliminada correctamente';
        END IF;
    END ELIMINAR_CUENTA_BANCARIA;
    
    PROCEDURE CARGAR_CUENTAS_BANCARIAS (
        P_ID_USER IN CUENTAS.ID_USER%TYPE,
        P_CUENTAS OUT SYS_REFCURSOR,
        P_REPLY OUT VARCHAR2
    ) AS
        V_ID_USER CUENTAS.ID_USER%TYPE := 0;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_REPLY := 'Usuario no existe';
        ELSE
            OPEN P_CUENTAS FOR SELECT
                                   *
                               FROM
                                   CUENTAS
                               WHERE
                                   ID_USER = P_ID_USER;
    
        END IF;
    END CARGAR_CUENTAS_BANCARIAS;
    
    PROCEDURE CARGAR_HISTORIAL_TRANSACCIONES (
        P_ID_USER       IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
        P_ID_CUENTA     IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
        P_TRANSACCIONES OUT SYS_REFCURSOR,
        P_REPLY         OUT VARCHAR2
    ) AS
        V_ID_USER CUENTAS.ID_USER%TYPE := 0;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_REPLY := 'Usuario no existe';
        ELSE
            OPEN P_TRANSACCIONES FOR SELECT
                                         *
                                     FROM
                                         HISTORIAL_TRANSACCIONES
                                     WHERE
                                             ID_CUENTA_ORIGEN = P_ID_CUENTA
                                         OR  ID_CUENTA_DESTINO = P_ID_CUENTA;
        END IF;
    END CARGAR_HISTORIAL_TRANSACCIONES;
    
    PROCEDURE TRANSFERENCIA (
        P_ID_TRANSACCION IN HISTORIAL_TRANSACCIONES.ID_TRANSACCION%TYPE,
        P_ID_USER IN HISTORIAL_TRANSACCIONES.ID_USER%TYPE,
        P_ID_CUENTA_ORIGEN IN HISTORIAL_TRANSACCIONES.ID_CUENTA_ORIGEN%TYPE,
        P_ID_CUENTA_DESTINO HISTORIAL_TRANSACCIONES.ID_CUENTA_DESTINO%TYPE,
        P_MONTO IN HISTORIAL_TRANSACCIONES.MONTO%TYPE,
        P_REPLY OUT VARCHAR2
    ) AS
        V_ID_USER CUENTAS.ID_USER%TYPE := 0;
        V_ID_TRANSACCION FACTURAS.ID_TRANSACCION%TYPE;
        V_SALDO_ACTUAL_ORIGEN CUENTAS.SALDO_ACTUAL%TYPE;
        V_SALDO_ACTUAL_DESTINO CUENTAS.SALDO_ACTUAL%TYPE;
        V_ID_CUENTA_ORIGEN CUENTAS.ID_CUENTA%TYPE;
        V_ID_CUENTA_DESTINO CUENTAS.ID_CUENTA%TYPE;
        V_DESCRIPCION HISTORIAL_TRANSACCIONES.DESCRIPCION%TYPE;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => TO_CHAR(P_ID_USER), P_DATA2 => '',  P_BY => 'ID_USER')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_REPLY := 'Usuario no existe';
        ELSE
            SELECT
                ID_TRANSACCION
            INTO V_ID_TRANSACCION
            FROM
                HISTORIAL_TRANSACCIONES
            WHERE
                ID_TRANSACCION = P_ID_TRANSACCION;
                
            SELECT
                C1.SALDO_TOTAL,
                C2.SALDO_TOTAL,
                HT.DESCRIPCION
            INTO
                V_SALDO_ACTUAL_ORIGEN,
                V_SALDO_ACTUAL_DESTINO,
                V_DESCRIPCION
            FROM
                HISTORIAL_TRANSACCIONES HT
                INNER JOIN CUENTAS C1
                     ON HT.ID_CUENTA_ORIGEN = C1.ID_CUENTA
                INNER JOIN CUENTAS C2
                     ON HT.ID_CUENTA_DESTINO = C2.ID_CUENTA
            WHERE
                ID_TRANSACCION = V_ID_TRANSACCION;
                
            IF V_SALDO_ACTUAL_ORIGEN > P_MONTO THEN
                P_REPLY := 'Usuario no tiene el monto disponible';
            ELSE
                INSERT INTO 
                    HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
                VALUES
                    (V_ID_USER, V_ID_CUENTA_ORIGEN, V_ID_CUENTA_DESTINO, 200, P_MONTO, V_DESCRIPCION);
    
                UPDATE HISTORIAL_TRANSACCIONES
                SET
                    ID_STATUS = 200
                WHERE
                    ID_TRANSACCION = V_ID_TRANSACCION;
            END IF;
    
        END IF;
    END TRANSFERENCIA;
    
    PROCEDURE DYNAMIC_UPDATE (
        P_TABLE IN VARCHAR2,
        P_COLUMN IN VARCHAR2,
        P_VALUE IN VARCHAR2,
        P_WHERE IN VARCHAR2
    ) AS
        UPDATE_SQL VARCHAR2(300);
    BEGIN
        UPDATE_SQL := 'UPDATE ' || P_TABLE ||
            ' SET ' || P_COLUMN ||' = ' || '''' ||  P_VALUE || '''' ||
            ' WHERE ' || P_WHERE;
        
        EXECUTE IMMEDIATE UPDATE_SQL;
    END;
    
    PROCEDURE DYNAMIC_DELETE(
        P_TABLE IN VARCHAR2,
        P_WHERE IN VARCHAR2
    ) AS
        DELETE_SQL VARCHAR2(300);
    BEGIN
        DELETE_SQL := 'DELETE FROM ' || P_TABLE || ' WHERE ' || P_WHERE;
        
        EXECUTE IMMEDIATE DELETE_SQL;
    END DYNAMIC_DELETE;
    
END PKG_CUENTAS; 

-- SERVICES Package
----------------------------------------------------------
BEGIN
  EXECUTE IMMEDIATE 'DROP PACKAGE PKG_SERVICES';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -4043 THEN
      RAISE;
    END IF;
END;

CREATE PACKAGE PKG_SERVICES AS 
   PROCEDURE CARGAR_SERVICIOS(P_SERVICIOS OUT SYS_REFCURSOR);
END PKG_SERVICES;

CREATE OR REPLACE PACKAGE BODY PKG_SERVICES AS  
    PROCEDURE CARGAR_SERVICIOS (
        P_SERVICIOS OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN P_SERVICIOS FOR SELECT
                               *
                           FROM
                               SERVICIOS;
    END CARGAR_SERVICIOS;
END PKG_SERVICES; 

-- FACTURAS Package
----------------------------------------------------------
BEGIN
  EXECUTE IMMEDIATE 'DROP PACKAGE PKG_FACTURAS';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -4043 THEN
      RAISE;
    END IF;
END;

CREATE PACKAGE PKG_FACTURAS AS 
   PROCEDURE VERIFICAR_FACTURA(P_ID_USER IN CUENTAS.ID_USER%TYPE,
        P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
        P_FACTURA OUT SYS_REFCURSOR,
        P_REPLY OUT VARCHAR2);
        
    PROCEDURE PAGAR_FACTURA(P_ID_FACTURA IN FACTURAS.ID_FACTURA%TYPE,
        P_ID_USER IN CUENTAS.ID_USER%TYPE,
        P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
        P_MONTO IN FACTURAS.ID_SERVICIO%TYPE,
        P_REPLY OUT VARCHAR2);
END PKG_FACTURAS;
    
CREATE OR REPLACE PACKAGE BODY PKG_FACTURAS AS  
    PROCEDURE VERIFICAR_FACTURA (
        P_ID_USER IN CUENTAS.ID_USER%TYPE,
        P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
        P_FACTURA OUT SYS_REFCURSOR,
        P_REPLY OUT VARCHAR2
        ) AS
            V_ID_USER CUENTAS.ID_USER%TYPE := 0;
        BEGIN
            SELECT
                GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
            INTO
                V_ID_USER
            FROM
                DUAL;
        
            IF V_ID_USER = 0 THEN
                P_REPLY := 'Usuario no existe';
            ELSE
                OPEN P_FACTURA FOR SELECT
                                       F.ID_FACTURA,
                                       F.ID_TRANSACCION,
                                       F.ID_SERVICIO,
                                       F.ID_STATUS
                                   FROM
                                            FACTURAS F
                                       INNER JOIN HISTORIAL_TRANSACCIONES HT
                                        ON F.ID_TRANSACCION = HT.ID_TRANSACCION
                                   WHERE
                                           F.ID_SERVICIO = P_ID_SERVICIO
                                       AND HT.ID_USER = P_ID_USER
                                       AND F.ID_STATUS = 300;
            END IF;
    END VERIFICAR_FACTURA;
    
    PROCEDURE PAGAR_FACTURA (
        P_ID_FACTURA IN FACTURAS.ID_FACTURA%TYPE,
        P_ID_USER IN CUENTAS.ID_USER%TYPE,
        P_ID_SERVICIO IN FACTURAS.ID_SERVICIO%TYPE,
        P_MONTO IN FACTURAS.ID_SERVICIO%TYPE,
        P_REPLY OUT VARCHAR2
    ) AS
        V_ID_USER CUENTAS.ID_USER%TYPE := 0;
        V_ID_TRANSACCION FACTURAS.ID_TRANSACCION%TYPE;
        V_SALDO_ACTUAL_ORIGEN CUENTAS.SALDO_ACTUAL%TYPE;
        V_SALDO_ACTUAL_DESTINO CUENTAS.SALDO_ACTUAL%TYPE;
        V_ID_CUENTA_ORIGEN CUENTAS.ID_CUENTA%TYPE;
        V_ID_CUENTA_DESTINO CUENTAS.ID_CUENTA%TYPE;
        V_DESCRIPCION HISTORIAL_TRANSACCIONES.DESCRIPCION%TYPE;
    BEGIN
        SELECT
            GET_ID_USER(P_DATA => P_ID_USER, P_DATA2 => '', P_BY => 'ID_USER')
        INTO
            V_ID_USER
        FROM
            DUAL;
    
        IF V_ID_USER = 0 THEN
            P_REPLY := 'Usuario no existe';
        ELSE
            SELECT
                ID_TRANSACCION
            INTO V_ID_TRANSACCION
            FROM
                FACTURAS
            WHERE
                ID_FACTURA = P_ID_FACTURA;
                
            SELECT 
                C1.SALDO_TOTAL,
                C2.SALDO_TOTAL,
                HT.DESCRIPCION
            INTO
                V_SALDO_ACTUAL_ORIGEN,
                V_SALDO_ACTUAL_DESTINO,
                V_DESCRIPCION
            FROM
                HISTORIAL_TRANSACCIONES HT
                INNER JOIN CUENTAS C1
                     ON HT.ID_CUENTA_ORIGEN = C1.ID_CUENTA
                INNER JOIN CUENTAS C2
                     ON HT.ID_CUENTA_DESTINO = C2.ID_CUENTA
            WHERE
                ID_TRANSACCION = V_ID_TRANSACCION;
                
            IF V_SALDO_ACTUAL_ORIGEN > P_MONTO THEN
                P_REPLY := 'Usuario no tiene el monto disponible';
            ELSE
                INSERT INTO 
                    HISTORIAL_TRANSACCIONES(ID_USER, ID_CUENTA_ORIGEN, ID_CUENTA_DESTINO, ID_STATUS, MONTO, DESCRIPCION)
                VALUES
                    (V_ID_USER, V_ID_CUENTA_ORIGEN, V_ID_CUENTA_DESTINO, 200, P_MONTO, V_DESCRIPCION);
    
                UPDATE FACTURAS
                                SET
                            ID_STATUS = 200
                        WHERE
                            ID_FACTURA = ID_FACTURA;
            END IF;
    
        END IF;
    END PAGAR_FACTURA;
END PKG_FACTURAS; 